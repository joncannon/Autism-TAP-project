timestamp = datestr(clock, 'dd-mmm-yyyy_HH+MM+SS');
Fs = 44100;

filepath = strcat('../../stimulus_sequences/', 'sinai_', timestamp);
mkdir(filepath);
filepath = strcat(filepath, '/');

params = default_params();
params.sound_list{params.standard_index} = params.sound_list{params.standard_index}*4;
params.sound_list{params.deviant_index} = resample(params.sound_list{params.standard_index}, 15,14);

separation_space = zeros(44100*params.intertrial_time, 2);

sync_time = (params.sync_eeg_samples/512);

params.components_path = params.components_path+"MtSinai/";

numbers = cell(1,10);
for i=1:10
    numbers{i} = audioread(instruction_path+num2str(i)+".m4a");
end


tempi = [100, 106, 112, 118, 124];
periods = 60./tempi;
listening_deviant_rate = 0.05;
tag = 0;

track1 = audioread('music/14.mp3');
track1 = .2*track1(:,1);
all_tracks = {track1};
delay_samples = 2*44100 - 2200;



metronome_n_duplicates = 1%2;
metronome_n_clicks = 30;
listen_metronome_blocks = {};
tap_metronome_blocks = {};

for p= 1:length(periods)
    for n = 1:metronome_n_duplicates
        filename = strcat(filepath, 'nofile', timestamp);
        params.target_delay = 3;
        
        listen_block = stim_maker_general('params', params,...
            'period', periods(p),...
            'n_events',metronome_n_clicks,...
            'deviant_rate', listening_deviant_rate,...
            'target_delay', 3);
        
        listen_block.instruction_type = 'listen';
        listen_block.type = 'listen_metronome';
        listen_block.instructions = [];%%%
        listen_metronome_blocks{end+1} = listen_block;
        
        tap_block = stim_maker_general('params', params,...
            'period', periods(p),...
            'n_events',metronome_n_clicks,...
            'target_delay', 6);
        
        tap_block.instruction_type = 'tap';
        tap_block.type = 'tap_metronome';
        tap_block.instructions = [];%%%
        tap_metronome_blocks{end+1} = tap_block;

    end
end

jitter_n_duplicates = 1%2;
jitter_n_clicks = 20;
listen_jitter_blocks = {};

for p= 1:length(periods)
    for n = 1:jitter_n_duplicates
        filename = strcat(filepath, 'nofile', timestamp);
        params.target_delay = 3;
        listen_block = stim_maker_general('params', params,...
            'period', periods(p),...
            'n_events',jitter_n_clicks,...
            'deviant_rate', listening_deviant_rate,...
            'target_delay', 3,...
            'jitter', .2);
        
        listen_block.instruction_type = 'listen';
        listen_block.type = 'listen_jitter';
        listen_block.instructions = [];%%%
        listen_jitter_blocks{end+1} = listen_block;
        
    end
end

listen_switching_blocks = {};
tap_switching_blocks = {};

params.target_delay = 2;
for n = 1:2
    filename = strcat(filepath, 'nofile', timestamp);
    listen_block = stim_maker_general('params', params,...
            'period', [periods(1),periods(end),periods(1),periods(end),periods(1),periods(end)],...
            'n_events',[10, 9, 9, 8, 10, 9],...
            'deviant_rate', .05,...
            'target_delay', 3);
        
    listen_block.instruction_type = 'listen';
    listen_block.type = 'listen_switching_metronome';
    listen_block.instructions = [];%%%
    listen_switching_blocks{end+1} = listen_block;

    filename = strcat(filepath, 'nofile', timestamp);
    tap_block = stim_maker_general('params', params,...
            'period', [periods(1),periods(end),periods(1),periods(end),periods(1),periods(end)],...
            'n_events',[10, 9, 9, 8, 10, 9],...
            'deviant_rate', 0,...
            'target_delay', 3);
    tap_block.filename=filename;
    tap_block.instruction_type = 'tap';
    tap_block.type = 'tap_switching_metronome';
    tap_block.instructions = [];%%%
    tap_switching_blocks{end+1} = tap_block;
end

syncopated_n_duplicates = 1;
listen_syncopated_blocks = {};
tap_syncopated_blocks = {};

for p= 1:length(periods)
    for n = 1:syncopated_n_duplicates
        
        filename = strcat(filepath, 'nofile', timestamp);
        params.target_delay = 2;
        listen_block = stim_maker_syncpattern_deviant(filename, periods(p), 10, .05, true, tag, params);
        listen_block.filename=filename;
        listen_block.instruction_type = 'listen';
        listen_block.type = 'listen_syncopated';
        listen_block.instructions = [];%%%
        listen_syncopated_blocks{end+1} = listen_block;
        
        params.target_delay = 6;
        tap_block = stim_maker_syncpattern_deviant(filename, periods(p), 10, 0, true, tag, params);
        tap_block.filename=filename;
        tap_block.instruction_type = 'tap';
        tap_block.type = 'tap_syncopated';
        tap_block.instructions = [];%%%
        tap_syncopated_blocks{end+1} = tap_block;
    end
end


music_n_duplicates = 1;
listen_music_blocks = {};
tap_music_blocks = {};

for p= 1:length(periods)
    
    track = resample(track1, 125, tempi(p));
    track = vertcat(zeros(delay_samples, 1), track);
    tracksamples = length(track);
    
    for n = 1:music_n_duplicates
        
        filename = strcat(filepath, 'nofile', timestamp);
        params.target_delay = 2;
        listen_block=stim_maker_general('params', params,...
            'period', periods(p),...
            'n_events',[13,3,8],...
            'deviant_rate', [.05, 0, .05],...
            'event_type', [params.standard_index, params.omission_index, params.standard_index],...
            'target_delay', 2);
        
        listen_block.sound(1:tracksamples,1) = listen_block.sound(1:tracksamples,1) + track;
        listen_block.instruction_type = 'listen';
        listen_block.type = 'listen_music';
        listen_block.instructions = [];%%%
        listen_music_blocks{end+1} = listen_block;
        
        params.target_delay = 2;
        tap_block = stim_maker_general('params', params,...
            'period', periods(p),...
            'n_events',[13,3,8],...
            'deviant_rate', 0,...
            'event_type', [params.standard_index, params.omission_index, params.standard_index],...
            'target_delay', 2);
        
        tap_block.sound(1:tracksamples,1) = tap_block.sound(1:tracksamples,1) + track;
        tap_block.instruction_type = 'tap';
        tap_block.type = 'tap_music';
        tap_block.instructions = [];%%%
        tap_music_blocks{end+1} = tap_block;
    end
end

free_tap_duration = 10;
free_tap_blocks = {};
free_tap_reps = 3;

for n = 1:free_tap_reps
    filename = strcat(filepath, 'nofile', timestamp);
    params.target_delay = 3;

    free_block = stim_maker_general('params', params,...
        'period', free_tap_duration,...
        'n_events',1,...
        'event_type', params.target_index,...
        'target_delay', 1);

    free_block.instruction_type = 'free';
    free_block.type = 'free_tap';
    free_block.instructions = [];%%%
    free_tap_blocks{end+1} = free_block;


end

listen_metronome_blocks = listen_metronome_blocks(randperm(numel(listen_metronome_blocks)));
listen_jitter_blocks = listen_jitter_blocks(randperm(numel(listen_jitter_blocks)));
listen_switching_blocks = listen_switching_blocks(randperm(numel(listen_switching_blocks)));
listen_syncopated_blocks = listen_syncopated_blocks(randperm(numel(listen_syncopated_blocks)));
listen_music_blocks = listen_music_blocks(randperm(numel(listen_music_blocks)));

example_block = stim_maker_general('params', params,...
            'period', .75,...
            'n_events',5,...
            'deviant_rate', 1,...
            'end_target', false);

listen_metronome_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_1_listen.m4a"),...
    example_block.sound(:,1),...
    audioread(instruction_path+"MtSinai_2_whenyou.m4a"),...
    audioread(instruction_path+"MtSinai_3_break.m4a"),...
    audioread(instruction_path+"MtSinai_inthispart.m4a"),...
    audioread(instruction_path+"MtSinai_10sec.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(listen_metronome_blocks))+".m4a"));

listen_metronome_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(listen_metronome_blocks)
    listen_metronome_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(listen_metronome_blocks))+".m4a"));
    listen_metronome_blocks{i}.instructions(:,2) = 0;
end

listen_jitter_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_inthispart.m4a"),...
    audioread(instruction_path+"MtSinai_10sec.m4a"),...
    audioread(instruction_path+"MtSinai_6_continue.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(listen_jitter_blocks))+".m4a"));

listen_jitter_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(listen_jitter_blocks)
    listen_jitter_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(listen_jitter_blocks))+".m4a"));
    listen_jitter_blocks{i}.instructions(:,2) = 0;
end

listen_switching_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_inthispart.m4a"),...
    audioread(instruction_path+"MtSinai_60sec.m4a"),...
    audioread(instruction_path+"MtSinai_6_continue.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(listen_switching_blocks))+".m4a"));

listen_switching_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(listen_switching_blocks)
    listen_switching_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(listen_switching_blocks))+".m4a"));
    listen_switching_blocks{i}.instructions(:,2) = 0;
end

listen_syncopated_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_inthispart.m4a"),...
    audioread(instruction_path+"MtSinai_20sec.m4a"),...
    audioread(instruction_path+"MtSinai_6_continue.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(listen_syncopated_blocks))+".m4a"));

listen_syncopated_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(listen_syncopated_blocks)
    listen_syncopated_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(listen_syncopated_blocks))+".m4a"));
    listen_syncopated_blocks{i}.instructions(:,2) = 0;
end

listen_music_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_8_music.m4a"),...
    audioread(instruction_path+"MtSinai_9_justlisten.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(listen_music_blocks))+".m4a"));

listen_music_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(listen_music_blocks)
    listen_music_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(listen_music_blocks))+".m4a"));
    listen_music_blocks{i}.instructions(:,2) = 0;
end

free_tap_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_10_freetap.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(free_tap_blocks))+".m4a"));

free_tap_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(free_tap_blocks)
    free_tap_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(free_tap_blocks))+".m4a"));
    free_tap_blocks{i}.instructions(:,2) = 0;
end

tap_metronome_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_11_tapalong.m4a"),...
    audioread(instruction_path+"MtSinai_12_keeptapping.m4a"),...
    audioread(instruction_path+"MtSinai_eachtrial.m4a"),...
    audioread(instruction_path+"MtSinai_10sec.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(tap_metronome_blocks))+".m4a"));

tap_metronome_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(tap_metronome_blocks)
    tap_metronome_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(tap_metronome_blocks))+".m4a"));
    tap_metronome_blocks{i}.instructions(:,2) = 0;
end

tap_switching_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_11_tapalong.m4a"),...
    audioread(instruction_path+"MtSinai_13_ifitchanges.m4a"),...
    audioread(instruction_path+"MtSinai_eachtrial.m4a"),...
    audioread(instruction_path+"MtSinai_60sec.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(tap_switching_blocks))+".m4a"));

tap_switching_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(tap_switching_blocks)
    tap_switching_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(tap_switching_blocks))+".m4a"));
    tap_switching_blocks{i}.instructions(:,2) = 0;
end
% COMPLETE THIS
% tap_syncopated_blocks{1}.instructions = vertcat(...
%     audioread(instruction_path+"MtSinai_11_tapalong.m4a"),...
%     audioread(instruction_path+"MtSinai_13_ifitchanges.m4a"),...
%     audioread(instruction_path+"MtSinai_eachtrial.m4a"),...
%     audioread(instruction_path+"MtSinai_60sec.m4a"),...
%     audioread(instruction_path+"Trial.m4a"),...
%     audioread(instruction_path+"1.m4a"),...
%     audioread(instruction_path+"of.m4a"),...
%     audioread(instruction_path+num2str(length(tap_syncopated_blocks))+".m4a"));
% 
% tap_syncopated_blocks{1}.instructions(:,2) = 0;
%     
% for i = 2:length(tap_syncopated_blocks)
%     tap_syncopated_blocks{i}.instructions = vertcat(...
%         audioread(instruction_path+"Trial.m4a"),...
%         audioread(instruction_path+num2str(i)+".m4a"),...
%         audioread(instruction_path+"of.m4a"),...
%         audioread(instruction_path+num2str(length(tap_syncopated_blocks))+".m4a"));
%     tap_syncopated_blocks{i}.instructions(:,2) = 0;
% end

tap_music_blocks{1}.instructions = vertcat(...
    audioread(instruction_path+"MtSinai_8_music.m4a"),...
    audioread(instruction_path+"MtSinai_16_taptomusic.m4a"),...
    audioread(instruction_path+"MtSinai_eachtrial.m4a"),...
    audioread(instruction_path+"MtSinai_10sec.m4a"),...
    audioread(instruction_path+"Trial.m4a"),...
    audioread(instruction_path+"1.m4a"),...
    audioread(instruction_path+"of.m4a"),...
    audioread(instruction_path+num2str(length(tap_music_blocks))+".m4a"));

tap_music_blocks{1}.instructions(:,2) = 0;
    
for i = 2:length(tap_music_blocks)
    tap_music_blocks{i}.instructions = vertcat(...
        audioread(instruction_path+"Trial.m4a"),...
        audioread(instruction_path+num2str(i)+".m4a"),...
        audioread(instruction_path+"of.m4a"),...
        audioread(instruction_path+num2str(length(tap_music_blocks))+".m4a"));
    tap_music_blocks{i}.instructions(:,2) = 0;
end

all_blocks = horzcat(listen_metronome_blocks, listen_jitter_blocks, listen_switching_blocks, listen_syncopated_blocks, listen_music_blocks, free_tap_blocks, tap_metronome_blocks, tap_switching_blocks, tap_syncopated_blocks, tap_music_blocks);

fullsound = [];

for i = 1:length(all_blocks)
    fullsound = vertcat(fullsound,all_blocks{i}.instructions, all_blocks{i}.sound);   
    fullsound = vertcat(fullsound,separation_space);
end


audiowrite(strcat(filepath, 'all_sinai_', timestamp, '.m4a'), fullsound, 44100);

save(strcat(filepath, 'all_sinai.mat_', timestamp, '.mat'), 'all_blocks');
